const glossary = [
{"term": "AJAX", "def": "Asynchronus JavaScript And XML"},
{"term": "API", "def": "Application Programming Interface- as a UI is for people an API tells computers/programs to talk to and gain information from each other"},
{"term": "Array", "def": "An array is a list of items, and are identified by the usage of [ ] "},
{"term": "Asynchronous", "def": "Not synchronized: that is not occuring at predetermined or regular intervals. Not done at the same time like synchronus is. It is used to describe communications in which data can be transmitted intermittently rather than in a steady stream. "},
{"term": "Block Level Scope", "def": "A variable declared with the let keyword is only available within the set of curly braces where it was declared. This means if it is declared within a function, it works much like local scope. If it is declared within a loop it only works within that loop. Check where the immediately proceeding curly brace is. That variable is only available between the braces - the code block in which it was declared"},
{"term": "Boolean", "def": "A value that is either true or false. Conditional statements compare values for true or false expressions, and are sometimes referred to as boolean logic"},
{"term": "Break Statement", "def": "looks like: break; Allows you to exit out of a loop, or a switch statement."},
{"term": "Built in function", "def": "This is a function that has been defined by the JS languge. Example: alert( )"},
{"term": "Camel Case", "def": "A JS naming style convention example: myVar, myFunction"},
{"term": "Case Senstitive", "def": "Uppercase and lowercase matters when naming variables or calling functions. MoveUp is not the same as moveUp."},
{"term": "Code Block", "def": "Surrounded by curly braces { } is a set of instructions to run when called or the condition is true.These are seen most commonly in functions and in conditional statements. Though a set of {} can be a generic object in JS as well."},
{"term": "Conditional Statements", "def": "Commonly referred to as if/else as that is the most common situation. Uses boolean logic to determine if a following code block should be executed. If the condition is true, then run the following code block"},
{"term": "Continue Statement", "def": "looks like: continue; Allows you to skip the rest of the code in a loop and skip back to the top of the loop."},
{"term": "Data Type", "def": "This describes the nature of the item you are working with. The data type will determine what type of method/behavior is available to use for it."},
{"term": "DOM", "def": "The Document Object Model, or the (DOM), is an interface to web pages. It is essentially an API to the page, allowing programs to read and manipulate the pageâ€™s content, structure, and styles."},
{"term": "Document", "def": "The current web page you are working with"},
{"term": "Dot Notation", "def": "This is the dot that is written between objects as you drill down inside an object AND a way to access an object's properties or to access a method."},
{"term": "Flowchart", "def": "A way to help visualize your plan in order to code it better"},
{"term": "Function", "def": "A reusable set of code instructions. When declared with a name, can be called at any time. A function does not run until it is called and this can be done by name or, anonomously via an event or within another function, or as a self invoked function that runs immediately"},
{"term": "Getter", "def": "Gets the value of a property (for contrast see setter)"},
{"term": "Global Scope", "def": "The outermost scope, and accessible to all code in your script, and the window"},
{"term": "HTML", "def": "Hyper Text Markup Language - a language designed to display and format text"},
{"term": "Inheritance", "def": "An object in JS gets properties and methods from its prototype. For example: An item that has an Array prototype has access to the array methods and array properties. This can be extended to custom objects when those are instantiated. "},
{"term": "initialize", "def": "Merriam-Webster: to set(something, such as  a computer progam counter) to a starting position, value or configuration. Ex: var myString = 'blah', var today = new Date() "},
{"term": "instantiate", "def": "A fancy way of saying 'create a new thing'. Instances say how many of that thing you have. Ex: A waitress brings you and a friend one coffee each. In programming that would be two instances of coffee. If a third friend comes by, your waitress could bring your friend a new instance of coffee or.... a new type of beverage: soda. In this situation, you would have 2 instances of coffee and one instance of soda."},
{"term": "Iterate", "def": "To go through a loop. object properties, an html collection or a node list. There are two types: explicit iteration and implicit iteration. Explict iteration is more active, implicit is more passive"},
{"term": "JSON", "def": "JavaScript Object Notation - this is a native JavaScript object that is frequently used to create a data heirarchal structure. For example, the Flikr API sends JSON data in order for you to access its resources. We will be making one in this class."},
{"term": "keyword", "def": "A keyword is a word that is predefined in the JavaScript language. It has a specific meaning to the language and cannot be used for variable or function names, or for any means other that what it is specified."},
{"term": "Local Scope", "def": "A variable declared within a function is only available to that function"},
{"term": "Logic Conditions", "def": "This is frequently used in conditional statements to determine the true/false expression of multiple comparisons"},
{"term": "Method", "def": "A function that is tied to a specific type of object. For example: myAudioObj.play() would work on an audio object but not work on myPictureObj.play() since there is no 'play' method available on an image. When you have a mismatched method to a data type you are trying to use it on JS will throw an error stating that the method asked for is not available on that data type."},
{"term": "new", "def": "creates a new instance of an object. Ex: new Date(), new Audio('pathtosoundfile.mp3')"},
{"term": "Number", "def": "In JS, numbers are anything that is  numerical. 7 is a number but 'seven' is a string. A number can be up to 16 decimal points. But integers are more accurate than floats due to the way that numbers are stored in memory with JS via binary"},
{"term": "Object", "def": "A generic term for an item that is not primative data. Arrays are an object, Any HTML element is an object through the DOM's API. An object will have methods and properties. In class, we've accessed an element's style properties through dot syntax. An object is a complex multilayered piece of data. It typically holds more than one piece of data. Arrays can hold a list of objects, string data, and/or numbers. This is what makes an array an  object. It isn't just a single piece of data like a primative data type is."},
{"term": "Parse", "def": "to interpret. In code terms that can mean the parsing of the DOM by your browser, where it interprets your HTML or interpreting the value of a variable. These are just two examples."},
{"term": "Property", "def": "This is a way to describe an object. A person may have a property of eyeColor."},
{"term": "Reserved word", "def": "These are keywords that are defined and words that are intended (but may not be part of the language yet) as keywords"},
{"term": "Return statement", "def": "returns the value to where it was called from"},
{"term": "Setter", "def": "Sets the value of a property (for contrast see getter)"},
{"term": "Scope", "def": "determines where a variable or function is accessible. Global scope is accessible everywhere, local scope is accessible only within the confines of where it is declared such as within a function, Block level scope is similar to local scope, but can be even more narrow when defined within a set of curly braces - such as within a loop or even a conditional statement."},
{"term": "String", "def": "A string is a set of characters. In JS this is usually primative data"},
{"term": "Syntax", "def": "The grammatical rules of a language"},
{"term": "User defined function", "def": "A user defined function is a function written by the programmer and is not built into JS"},
{"term": "var ", "def": "A keyword to declare a variable."},
{"term": "Variable", "def": "A named container for stored data"},
{"term": "XML", "def": "eXtensible Markup Language"}
]